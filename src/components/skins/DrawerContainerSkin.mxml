<?xml version="1.0" encoding="utf-8"?>

<!--

    ADOBE SYSTEMS INCORPORATED
    Copyright 2008 Adobe Systems Incorporated
    All Rights Reserved.

    NOTICE: Adobe permits you to use, modify, and distribute this file
    in accordance with the terms of the license agreement accompanying it.

-->

<!--- The default skin class for a Spark SkinnableContainer container.  

     @see spark.components.SkinnableContainer
        
      @langversion 3.0
      @playerversion Flash 10
      @playerversion AIR 1.5
      @productversion Flex 4
-->
<s:Skin xmlns:fx="http://ns.adobe.com/mxml/2009" xmlns:s="library://ns.adobe.com/flex/spark" 
    xmlns:fb="http://ns.adobe.com/flashbuilder/2009" alpha.disabled="0.5">

    <fx:Metadata>
    <![CDATA[ 
        /** 
         * @copy spark.skins.spark.ApplicationSkin#hostComponent
         */
        [HostComponent("spark.components.SkinnableContainer")]
    ]]>
    </fx:Metadata> 
	
	<fx:Script>
		<![CDATA[
			import components.DrawerGroup;
			
			import mx.core.IVisualElement;
			
			import spark.components.Group;
			import spark.components.Label;
			import spark.primitives.Ellipse;
			import spark.primitives.Rect;
			
			//close button
			private var _closeButton:IVisualElement;
			private function _getCloseButton():IVisualElement {
				
				if(!this._closeButton) {
					var button:Group 	= new Group();
					
					button.width		= button.height = 15;
					button.top			= 15;
					button.right		= 15;
					button.depth		= 99999;
					
					var me:Skin		= this;
					button.addEventListener(MouseEvent.MOUSE_DOWN,function():void {
						var host:DrawerGroup = hostComponent as DrawerGroup;
						host.close();
					});
					
					var circle:Ellipse	= new Ellipse();
					circle.left			= 0;
					circle.right		= 0;
					circle.top			= 0;
					circle.bottom		= 0;
					circle.fill			= new SolidColor(0xFFFFFF);
					
					
					button.addElement(circle);
					
					//create "X"
					var rect:Rect		= new Rect();
					rect.width			= button.width - 5;
					rect.height			= 2;
					rect.fill			= new SolidColor(0x000000);
					rect.top			= button.width/2 - rect.height/2 - 3;
					rect.left			= button.width/2 - rect.width/2 + 1;
					rect.rotation		= 45;
					
					button.addElement(rect);
					
					rect				= new Rect();
					rect.width			= button.width - 5;
					rect.height			= 2;
					rect.fill			= new SolidColor(0x000000);
					rect.top			= button.width/2 - rect.height/2 - 3;
					rect.left			= button.width/2 - rect.width/2 + 1;
					rect.rotation		= -45;
					button.addElement(rect);
					
					//drop in label
					var label:Label = new Label();
					label.top		= 1;
					label.left 		= 0;
					label.right		= 0;
					
					label.text		= "X";
					label.setStyle('fontSize','10');
					label.setStyle('color','#000000');
					label.setStyle('fontWeight','bold');
					label.setStyle('textAlign','center');
					
					this._closeButton = button as IVisualElement;
					
				}
				
				return this._closeButton;
			}
			
			public function hideCloseButton():void {
				this._closeButton.visible = false;
			}
			
			public function showCloseButton():void {
				this._closeButton.visible = true;
			}
		]]>
	</fx:Script>
    
    <fx:Script fb:purpose="styling">
        <![CDATA[         
            /**
             *  @private
             */
			
			override protected function initializationComplete():void
			{
				
				super.initializationComplete();
				
				this.addElementAt(this._getCloseButton(),0);
				
			} 
			
			
            override protected function updateDisplayList(unscaledWidth:Number, unscaledHeight:Number) : void
            {
                // Push backgroundColor and backgroundAlpha directly.
                // Handle undefined backgroundColor by hiding the background object.
                if (isNaN(getStyle("backgroundColor")))
                {
                   // background.visible = false;
                }
                else
                {
                 //   background.visible = true;
                   // bgFill.color = getStyle("backgroundColor");
                   // bgFill.alpha = getStyle("backgroundAlpha");
                }
                
                super.updateDisplayList(unscaledWidth, unscaledHeight);
            }
        ]]>        
    </fx:Script>
    
    <s:states>
        <s:State name="normal" />
        <s:State name="disabled" />
    </s:states>
    
	<!-- layer 1: background fill -->
	<!--- Defines the background color of the skin. -->
	<s:Rect id="background" radiusX="5" left="10" right="10" top="10" bottom="10" >
		
		<s:stroke>
			<s:SolidColorStroke color="#232323" caps="none" joints="miter" miterLimit="4" weight="2"/>
		</s:stroke>
		
		<s:fill>
			<s:SolidColor id="bgFill" alpha=".8" />
		</s:fill>
		
		<s:filters>
			<s:DropShadowFilter distance="0" alpha=".9" color="#000" blurX="10" blurY="10" />
		</s:filters>
		
	</s:Rect>
	
	<!-- mask -->
	<s:Group id="contentMask" left="12" right="12" top="12" bottom="12">
		<s:Rect radiusX="5" left="0" right="0" top="0" bottom="0">
			<s:fill>
				<s:SolidColor color="#000" />
			</s:fill>
		</s:Rect>
	</s:Group>
	
	<!-- Content -->
	<s:Group id="contentGroup" mask="{contentMask}" left="30" top="30" right="30" bottom="30" />
	

</s:Skin>
