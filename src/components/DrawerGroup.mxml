<?xml version="1.0" encoding="utf-8"?>
<s:SkinnableContainer xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" 
		 xmlns:mx="library://ns.adobe.com/flex/mx" 
		 width="400" 
		 height="300" 
		 skinClass="components.skins.DrawerContainerSkin"
		 creationComplete="handleCreationComplete(event)">
	
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
	</fx:Declarations>
	
	<fx:Metadata>
		[Event(name="open", type="com.refreshdigital.Drawer.DrawerEvent")]
		[Event(name="opened", type="com.refreshdigital.Drawer.DrawerEvent")]
		[Event(name="close", type="com.refreshdigital.Drawer.DrawerEvent")]
		[Event(name="closed", type="com.refreshdigital.Drawer.DrawerEvent")]
	</fx:Metadata>
	
	<fx:Script>
		<![CDATA[
			import com.refreshdigital.Drawer.DrawerEvent;
			import com.refreshdigital.Logger;
			import com.refreshdigital.Preferences;
			import com.refreshdigital.Util;
			
			import components.skins.DrawerContainerSkin;
			
			import mx.core.IVisualElement;
			import mx.core.UIComponent;
			import mx.events.FlexEvent;
			import mx.events.ResizeEvent;
			import mx.graphics.SolidColor;
			
			import spark.components.Group;
			import spark.components.Label;
			import spark.primitives.Ellipse;
			import spark.primitives.Rect;
			
			
			public static const MARGIN:Number 		= 5;
			protected static var _drawers:Array		= [];
			
			public static var STATUS_OPENING:String		= 'opening';
			public static var STATUS_OPEN:String		= 'open';
			public static var STATUS_CLOSED:String		= 'closed';
			public static var STATUS_CLOSING:String		= 'closing';
			
			public var drawerStatus:String				= DrawerGroup.STATUS_CLOSED;
			
			//if this window can be drag and placed
			public var draggable:Boolean = false;
			
			//after we close this drawer - we have to animate it shut, then call super.close()
			private var _callSuperClose:Boolean = false;
			
			//we save the width/height on resize, this ignores that
			private var _ignoreResize:Boolean 	= true;
			protected var _firstRun:Boolean		= true;
			
			public var keepOpenDuringHideAll:Boolean = false;
			
			public var resizable:Boolean			= false;
			
			private var _originalHeight:Number		= 0;
			private var _originalWidth:Number		= 0;
			
			//we save the children of the drawer here
			//they are removed on first open, dropped back in after opened
			//removed on closed
			private var _childHolder:Array		= [];
			
			//progress
			private var _progressElement:IVisualElement	= null;
			
			//anchor settings
			public var anchorParent:IVisualElement	= null;
			public var anchorPosition:Object		= {
				parent: "center bottom",
				drawer: "left top"
			};
			
			
			public function place():void {

				var resizable:String	= (this.resizable) ? 'resizable' : 'not-resizable';
				Logger.log("opening " + resizable + " window to: " + width + "x" + height + ' - ' + this.toString());
				
				var margin:Number = (Preferences.getInstance().getScreenPosition() == Preferences.POSITION_TOP) ? DrawerGroup.MARGIN : DrawerGroup.MARGIN * -1;
				
				//set the x/y based of the anchorParent
				if(anchorParent != null) {
					
					var positions:Array = this.anchorPosition.parent.split(" ");
					var left:String		= positions[0];
					var top:String		= positions[1];
					
					
					//the position we are using as a starting point
					var position:Point 		= Util.getGlobalPosition(anchorParent,false); 
					
					
					//get absolute position
					var parentX:Number		= position.x;
					var parentY:Number		= position.y;
					
					//find correct parent x & y
					switch(left) {
						
						case 'center':
							parentX += this.anchorParent.width/2;
							break;
						case 'right':
							parentX += this.anchorParent.width;
							break;
						//left	
						default:
							
					}
					
					//if we are position_bottom and our y is set to bottom, switch y to top so it shows above the bar now
					if(Preferences.getInstance().getScreenPosition() == Preferences.POSITION_BOTTOM && top == 'bottom') {
						top = 'top';
					}
					
					//parent y
					switch(top) {
						
						case 'bottom':
							parentY += this.anchorParent.height;
							break;
						
						case 'center':
							parentY += this.anchorParent.height/2;
							break;
						
						//top
						default:
							
							
					}
					
					//place ourselves
					positions 	= this.anchorPosition.drawer.split(" ");
					left		= positions[0];
					top			= positions[1];
					
					
					switch(left) {
						case 'center':
							this.x = parentX - width/2;
							break;
						case 'right':
							this.x = parentX - width;
							break;
						//left
						default:
							this.x = parentX;
					}
					
					//if we are at the bottom of the screen, our new anchor position is bottom
					if(Preferences.getInstance().getScreenPosition() == Preferences.POSITION_BOTTOM && top == 'top') {
						top = 'bottom';
					}
					
					switch(top) {
						case 'bottom':
							this.y 			= parentY - this.height + margin;
							break;
						case 'center':
							this.y 			= parentY - this.height/1 + margin;
							break;
						//top
						default:
							this.y 			= parentY;

					}
	
				} 
				//if there is no anchor parent
				else {
					
				}
				
				Logger.log("placing window at: " + this.x + ", " + this.y + ' - ' + this.toString());

			}
			
			public function animateOpen():void {
				
				//set status and hide the window until we're ready to start animating it open
				drawerStatus = DrawerGroup.STATUS_OPENING;
				this.visible = false;
				
				//get the height & width the window needs to be
				var width:Number  = (this._firstRun) ? this.width : Preferences.getInstance().getRecord('width: ' + this.toString(), this.width.toString());
				var height:Number = (this._firstRun) ? this.height : Preferences.getInstance().getRecord('height: ' + this.toString(), this.height.toString());
				
				
				//handle min/max size settings
				var minHeightOriginal:Number 	= this.minHeight;
				var minWidthOriginal:Number 	= this.minWidth;
				
				this.minHeight 	= 0;
				this.minWidth 	= 0;
				
				
				//move to front
				this.orderToFront();
				
				//set it's starting point
				this.alpha 	= 0;
				this.width 	= 40;
				this.height = 40;
				
				//set the drawer back to visible
				this.visible	= true;
				
				_ignoreResize = true;
				
				//hide first
				this.contentGroup.alpha = 0;
				var me:DrawerGroup = this;
				
				Util.animateProperties(this, {
					alpha: 1,
					width: width,
					height: height
				},{
					duration: .5, 
					completeCallback: function():void {
						
						//start saving size on resizes now
						_ignoreResize = false;
						
						//set back up min width and height
						minWidth 	= minWidthOriginal;
						minHeight 	= minHeightOriginal;
						
						Logger.log('window opened to dimensions: ' + me.width.toString() + 'x' + me.height.toString() + ' - ' + me.toString());
						
						//show content
						Util.animateProperties(contentGroup,{
							alpha: 1
						},{ duration: .5 });
						
						//place it after it's done opening
						me.place();
						
						//call after show
						afterShow();
					},
					
					stepCallback: function():void {
						me.place();
					}
					
				});
			}
			
			public function open():void {
				
				//so they can't open, open, open, open
				if(this.drawerStatus == STATUS_OPEN || this.drawerStatus == STATUS_OPENING) {
					return;
				}
				
				//send out open event
				this.dispatchDrawerEvent(DrawerEvent.OPEN);
				
				//put the window into place
				this.animateOpen();
				
				if(this._firstRun) {
					
					
					//add to global list
					DrawerGroup._drawers.push(this);
					
					//run init first run only
					this.init();
					
					//remove children on first show only, then remove on close
					this._removeChildren();
				}
				
				
				
			}
			
			public function show():void {
				this.open();
			}
			
			public function init():void {
				
				//setup draggable
				if(this.draggable) {
					//this.addEventListener(MouseEvent.MOUSE_DOWN,handleMouseDownForDrag);
				}
								
			}
			
			override public function toString():String {
				var name:String = super.toString().replace(/[^a-z]/gi,'');
				return name;
			}
			
			public function dispatchDrawerEvent(type:String):Boolean {
				var event:DrawerEvent = new DrawerEvent(type);
				event.drawer = this;
				super.dispatchEvent(event);
				return true;
			} 
				
		
			
			public function orderToFront():void {
				
			}
			
			public function afterShow():void {
				
				this._restoreChildren();
				
				drawerStatus	 	= DrawerGroup.STATUS_OPEN;
				dispatchDrawerEvent(DrawerEvent.OPENED);
				
				_firstRun 			= false;
				
			}
		
			public static function getFromId(id:String):Drawer {
				for(var c:Number = 0;c < DrawerGroup._drawers.length; c++) {
					
					if(DrawerGroup._drawers[c].toString() == id && 
						(DrawerGroup._drawers[c].drawerStatus == DrawerGroup.STATUS_OPEN || DrawerGroup._drawers[c].drawerStatus == DrawerGroup.STATUS_OPENING)) {
						return DrawerGroup._drawers[c];
					} 
				}
				
				return null;
			}
			
			
			public function close():void {
				
				//only close if we're open
				if(this.drawerStatus != DrawerGroup.STATUS_OPEN) {
					return;
				}
				
				//set status and tell the world
				drawerStatus = DrawerGroup.STATUS_CLOSING;
				this.dispatchDrawerEvent(DrawerEvent.CLOSE);
				
				//var skin:DrawerContainerSkin = this.skin as DrawerContainerSkin;
				//skin.hideCloseButton();
				
				//remove children for smooth animation
				this._removeChildren();
				
				this.minHeight 	= 0;
				this.minWidth 	= 0;
				
				//so we don't save the size as it's animating
				_ignoreResize = true;
				
				//save current location
				Preferences.getInstance().setRecord('width: ' + this.toString(), this.width.toString());
				Preferences.getInstance().setRecord('height: ' + this.toString(), this.height.toString());
				Logger.log('saving window dimensions: ' + this.width.toString() + 'x' + this.height.toString() + ' - ' + this.toString());
				
				//calculate new top if we are positioned bottom
				var destinationTop:Number = this.y;
				if(Preferences.getInstance().getScreenPosition() == Preferences.POSITION_BOTTOM) {
					destinationTop += (this.height - 40);
				}
				
				//scope
				var me:DrawerGroup = this;
				
				Util.animateProperties(this, {
					alpha: 0,
					width: 40,
					height: 40,
					y: destinationTop
				},{
					duration: .5, 
					completeCallback: function():void {
						me.visible 		= false;
						drawerStatus 	= DrawerGroup.STATUS_CLOSED;
						dispatchDrawerEvent(DrawerEvent.CLOSED);
					},
					stepCallback: function():void {
						me.place();
					}
				});
				
			}
			
			/*
			public function handleResize(event:NativeWindowBoundsEvent):void {
				
				if(!_ignoreResize) {
					Logger.log('saving drawer dimensions: ' + this.width.toString() + 'x' + this.height.toString() + ' - ' + this.toString());
					Preferences.getInstance().setRecord('width: ' + this.toString(), this.width.toString());
					Preferences.getInstance().setRecord('height: ' + this.toString(), this.height.toString());
				}
			}*/
			
			public static function closeAllDrawers():void {
				
				for(var c:Number=0;c<DrawerGroup._drawers.length;c++) {
					if(DrawerGroup._drawers[c].drawerStatus == DrawerGroup.STATUS_OPEN && !DrawerGroup._drawers[c].keepOpenDuringHideAll) {
						DrawerGroup._drawers[c].close();
					}
				}
				
			}
			
			public static function getOpenDrawerCount():Number {
				var count:Number = 0;
				
				for(var c:Number=0;c<DrawerGroup._drawers.length;c++) {
					if(DrawerGroup._drawers[c].drawerStatus != DrawerGroup.STATUS_CLOSED) {
						count ++;
					}
				}
				
				return count;
			}
			
			public function handleMouseDownForDrag(event:MouseEvent):void {
				if(this.draggable && event.localY < 25) {
					//nativeWindow.startMove();
				}
			}
			
			public function showProgress(message:String = ''):void {
				if(!this._progressElement) {
					
					//setup progress group
					var group:Group 	= new Group();
					group.depth 		= 9999;
			
					
					//drop in background
					var background:Rect	= new Rect();
					background.left		= group.left 	= 0;
					background.right	= group.right 	= 0;
					background.top		= group.top		= 0;
					background.bottom	= group.bottom 	= 0;
					background.depth	= 1;
					background.fill		= new SolidColor(0x000000,.7);
					background.radiusX	= 10;
					
					group.addElement(background);
					
					//drop in progress flash component
					var progress:Progress 	= new Progress();
					progress.depth 			= 2;
					progress.left 			= 10;
					progress.top 			= 10;
					
					group.addElement(progress);
					
					//drop in label
					var progressLabel:Label = new Label();
					
					progressLabel.setStyle("textAlign","center");
					progressLabel.setStyle("color",0xFFFFFF);
					progressLabel.setStyle("fontSize",'14');
					progressLabel.setStyle("fontWeight",'bold');
					
					progressLabel.height	= 100;
					progressLabel.depth		= 2;
					progressLabel.left 		= 0;
					progressLabel.right 	= 0;
					
					group.addElement(progressLabel);
					
					//save the group as our "progress element"
					this._progressElement 	= group as IVisualElement;
					
					//add progress element to drawer
					this.addElement(this._progressElement);
			
				}
				
				var progressGroup:Group = this._progressElement as Group;
				var prog:Progress		= progressGroup.getElementAt(1) as Progress;
				var label:Label			= progressGroup.getElementAt(2) as Label;
				
				if(message.length > 0) {
					label.text 		= message;
				}
				this._progressElement.alpha = 0;
				progressGroup.visible	= true;
				placeProgress();
				
				Util.animateProperties(this._progressElement,{
					alpha: 1
				},{
					duration: .5,
					completeCallback: function():void {
						placeProgress();
					}
				});
				
			}
			
			public function placeProgress():void {
				
				if(this._progressElement != null) {
					
					if (this._progressElement.visible) {
						
						//show group and set alpha to 0 so it can fade in
						var progressGroup:Group = this._progressElement as Group;
						
						//place entire progress
						progressGroup.left 		= -10;
						progressGroup.top		= -10;
						progressGroup.bottom	= -10;
						progressGroup.right		= -10;
						
						//place progress swf
						var prog:Progress	= progressGroup.getElementAt(1) as Progress;
						prog.top 			= height/2 - prog.height;
						prog.left 			= width/2 - (prog.width/2);
						
						//place the label
						var label:Label			= progressGroup.getElementAt(2) as Label;
						label.top				= prog.top + prog.height + 10;
						
					} 
						//if the progress isn't visible, shrink it out of the way
						//so it doesn't intercept clicks
					else {
						this._progressElement.alpha = 0;
						this._progressElement.width = 0;
						this._progressElement.height = 0;
					}
				}
			}
			
			
			public function hideProgress():void {
				if(this._progressElement) {
					this._progressElement.visible = false;
				}
			}
			
			protected function handleCreationComplete(event:FlexEvent):void
			{
				// TODO Auto-generated method stub
				this.visible = false;
			}
			
			private function _removeChildren():void {
				if(this._childHolder.length == 0) {
					for(var c:Number = 0; c < this.numElements; c++) {
						this._childHolder.push(this.getElementAt(c));
					}
				}
				
				for each(var child:IVisualElement in this._childHolder) {
					this.removeElement(child);
				}
				
			}
		
			private function _restoreChildren():void {
				for each(var child:IVisualElement in this._childHolder) {
					this.addElement(child);
				}
			}
			
		]]>
	</fx:Script>
	
</s:SkinnableContainer>
