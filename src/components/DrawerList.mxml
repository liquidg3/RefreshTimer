<?xml version="1.0" encoding="utf-8"?>
<components:DrawerGroup xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" 
		 xmlns:mx="library://ns.adobe.com/flex/mx" 
		 xmlns:local="*" 
		 xmlns:components="components.*"
		 resizable="false"
		 width="500"
		 height="600" xmlns:custom="com.refreshdigital.*">
	
	
	<fx:Script>
		<![CDATA[
			import components.skins.DrawerListChecklistItemRenderer;
			import components.skins.DrawerListDefaultItemRenderer;
		]]>
	</fx:Script>
	
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
	</fx:Declarations>
	
	<components:states>
		<s:State name="normal" />
		<s:State name="checklist" />
	</components:states>
	
	<fx:Script>
		<![CDATA[
			import com.refreshdigital.Drawer.DrawerEvent;
			import com.refreshdigital.Drawer.DrawerListItem;
			import com.refreshdigital.Drawer.DrawerListItemObject;
			import com.refreshdigital.Preferences;
			import com.refreshdigital.Project;
			
			import mx.collections.ArrayCollection;
			import mx.collections.Sort;
			import mx.collections.SortField;
			import mx.events.FlexMouseEvent;
			
			import spark.components.VGroup;
	
			[Bindable]
			public var items:ArrayCollection			= new ArrayCollection;
			
			[Bindable]
			public var searchString:String				= "";
			
			public static var STATE_LIST:String			= 'list';
			public static var STATE_CHECKLIST:String	= 'checklist';
			
			
			public function setItems(items:Array):void {
				
				this.items						= new ArrayCollection();
				
				var prefs:Preferences 			= new Preferences();

				for(var index:Number=0; index<items.length; index++) {
					this.items.addItem(new DrawerListItem(items[index], this.items));
				}
				
				initSort();
				this.setListMinWidth();
			}
			
			override public function init():void {
				
				//clear the selected item
				this.mainList.selectedItem 				= null;
				
				//reset search 
				this.searchString						= "";
				
				//refresh the drawer on show
				if(this.items != null) {
					this.items.refresh();
				}
				
				
				
				
				//run everything first run related
				if(this._firstRun) {
						
					//add listener to filter results
					this.addEventListener(KeyboardEvent.KEY_UP, function(event:KeyboardEvent):void {
						
						//if they hit the enter key, fake like they clicked on the selected item
						if (event.charCode == 13 && mainList.selectedIndex > -1) { 
							mainList.dispatchEvent(new MouseEvent(MouseEvent.MOUSE_DOWN));
							mainList.dispatchEvent(new MouseEvent(MouseEvent.MOUSE_UP));
							mainList.dispatchEvent(new MouseEvent(MouseEvent.CLICK));
						} else {
							keyUp(event);
						}
					});
					
					//on the first run, setup the sort settings
					this.initSort();
					
				}
				
				
			}
			
			override public function afterShow():void {
				
				//set focus to the list
				//focusManager.setFocus(this.mainList);	
				
				setListMinWidth();
				super.afterShow();
			}
			
			/**
			 * Handles the alphabetical sorting of the list
			 */
			private function initSort():void {
				
				var sortField:SortField		= new SortField();
				sortField.name				= "heading";
				sortField.caseInsensitive	= true;
				
				var dataSort:Sort			= new Sort();
				dataSort.fields				= [sortField];
				
				this.items.sort					= dataSort;
				this.items.filterFunction		= filterListItem;
				
				this.items.refresh();
			}
		
			
			public function get length():Number {
				//return mainList.numElements;
				return items.length;
			}
			
			public function get selectedItem():* {
				return this.mainList.selectedItem;
			}
			
			//helper to add event listener to the list from external
			public function addListEventListener(eventName:String, func:Function):void {
				this.mainList.addEventListener(eventName,func);
			}
			
			public function get selectedIndex():Number {
				return this.mainList.selectedIndex;
			}
	
			private function keyUp(e:KeyboardEvent):void {
				
				//if they hit escape or delete
				if (e.charCode == 8 || e.charCode == 27) {
					
					//we stop the event so the escape key
					//isn't sent to the drawer
					if (this.searchString != "") {
						this.searchString	= "";
						e.stopImmediatePropagation();
					} else {
						this.close();
					}
					
				} else {
					
					//if this is a valid character [0-9a-zA-Z]
					if (numToChar(e.charCode) != null) {
						//add it to the search string
						this.searchString				= this.searchString + numToChar(e.charCode);
						e.stopImmediatePropagation();
					}
				}
				
				
				
				this.items.refresh();
			}
			
			private function filterListItem(item:Object):Boolean {
				var listItem:DrawerListItem = item as DrawerListItem;
				return listItem.getListItemObject().filter(this.searchString);
			}
			
			private function numToChar(num:int):String {
				if (num > 47 && num < 58) {
					var strNums:String = "0123456789";
					return strNums.charAt(num - 48);
				} else if (num > 64 && num < 91) {
					var strCaps:String = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
					return strCaps.charAt(num - 65);
				} else if (num > 96 && num < 123) {
					var strLow:String = "abcdefghijklmnopqrstuvwxyz";
					return strLow.charAt(num - 97);
				} else {
					return null;
				}
			}


			protected function mouseWheelHandler(event:MouseEvent):void
			{
				
				mainScroller.viewport.horizontalScrollPosition = 0;
				event.stopImmediatePropagation();
				event.stopPropagation();
				return;
				
				// TODO Auto-generated method stub
				var horizontalScrollPosition:Number = mainScroller.viewport.horizontalScrollPosition;
				
				mainScroller.viewport.verticalScrollPosition += event.delta * -10;				
				
				
				
				
				trace(horizontalScrollPosition);
				mainScroller.viewport.horizontalScrollPosition = horizontalScrollPosition;
			}


			protected function setListMinWidth():void
			{
				
				mainList.minWidth 	= this.contentGroup.width - 18;
				//mainList.width		= mainList.minWidth;
				//mainList.width			= 300;
				//mainList.validateNow();
				//mainList.invalidateProperties();
				
				//trace(mainList.measuredWidth);
			}



		]]>
	</fx:Script>
	
		
	<s:Scroller id="mainScroller" right="0" left="0" top="0" bottom="10" mouseWheel="mouseWheelHandler(event)">
		
		<s:Group>
			
			<s:List 
				id="mainList"
				itemRenderer.normal="components.skins.DrawerListDefaultItemRenderer"
				itemRenderer.checklist="components.skins.DrawerListChecklistItemRenderer"
				dataProvider="{items}" 
				styleName="browseList">
				
				<s:layout>
					<s:VerticalLayout gap="0" horizontalAlign="contentJustify"  />
				</s:layout>
				
			</s:List>
		
			
		</s:Group>
		
	</s:Scroller>
	
	
	
	<s:Label left="0" bottom="-10" text="{searchString}" />	
	<components:DualButton id="dualButton" bottom="-10" right="15" visible="false" />
	<custom:ButtonIcon id="btnRefresh" 
					   icon="@Embed(source='assets/images/refresh16x16.png')" 
					   height="20"
					   width="26" 
					   right="-15"
					   bottom="-10"
					   toolTip="Refresh"/>
	
	
	
</components:DrawerGroup>